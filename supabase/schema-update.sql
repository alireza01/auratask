-- Update tasks table for granular AI controls
ALTER TABLE public.tasks 
DROP COLUMN IF EXISTS disable_ai;

ALTER TABLE public.tasks 
ADD COLUMN enable_ai_ranking boolean NOT NULL DEFAULT true,
ADD COLUMN enable_ai_subtasks boolean NOT NULL DEFAULT true;

-- Create admin logs table for professional logging
CREATE TABLE public.admin_logs (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    level text NOT NULL CHECK (level IN ('INFO', 'WARNING', 'ERROR', 'FATAL')),
    message text NOT NULL,
    metadata jsonb,
    is_resolved boolean DEFAULT false NOT NULL
);

-- RLS for admin logs
ALTER TABLE public.admin_logs ENABLE ROW LEVEL SECURITY;

-- Function to check if user is admin
CREATE OR REPLACE FUNCTION public.is_admin()
RETURNS boolean AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1 FROM public.user_settings 
    WHERE id = auth.uid() AND username = 'admin'
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- Admin logs policies
CREATE POLICY "Admins can manage logs" ON public.admin_logs FOR ALL
    USING (public.is_admin());

-- RPC function for logging events
CREATE OR REPLACE FUNCTION public.log_event(
    p_level text,
    p_message text,
    p_metadata jsonb DEFAULT NULL
)
RETURNS void AS $$
BEGIN
    INSERT INTO public.admin_logs (level, message, metadata)
    VALUES (p_level, p_message, p_metadata);
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- RPC functions for admin statistics
CREATE OR REPLACE FUNCTION public.get_daily_user_growth(days integer)
RETURNS TABLE(day date, count bigint) AS $$
    SELECT date_trunc('day', created_at)::date as day, count(id)
    FROM auth.users
    WHERE created_at >= now() - (days || ' days')::interval
    GROUP BY day ORDER BY day;
$$ LANGUAGE sql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION public.get_task_completion_stats(days integer)
RETURNS TABLE(day date, completed bigint, created bigint) AS $$
    SELECT 
        date_trunc('day', created_at)::date as day,
        count(*) FILTER (WHERE is_completed = true) as completed,
        count(*) as created
    FROM public.tasks
    WHERE created_at >= now() - (days || ' days')::interval
    GROUP BY day ORDER BY day;
$$ LANGUAGE sql SECURITY DEFINER;

CREATE OR REPLACE FUNCTION public.get_ai_usage_stats()
RETURNS TABLE(
    total_ai_tasks bigint,
    total_tasks bigint,
    ai_percentage numeric
) AS $$
    SELECT 
        count(*) FILTER (WHERE ai_generated = true) as total_ai_tasks,
        count(*) as total_tasks,
        ROUND(
            (count(*) FILTER (WHERE ai_generated = true)::numeric / count(*)::numeric) * 100, 
            2
        ) as ai_percentage
    FROM public.tasks;
$$ LANGUAGE sql SECURITY DEFINER;
